name: release-flow

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version - in the form of v1.2.3'
        required: true
        type: string

env:
  # heads-up: this value is used as a pattern in an sed command as a workaround for a trunk issue
  #   if you use special characters, take a look at the 'Make paths relative' step in the 'build-web' job
  EXECUTABLE_NAME: schematic2bls

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  build-macOS:
    runs-on: macos-latest
    needs: get-version
    env:
      # macOS 11.0 Big Sur is the first version to support universal binaries
      MACOSX_DEPLOYMENT_TARGET: 11.0
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain for Apple Silicon
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: aarch64-apple-darwin
      - name: Build release for Apple Silicon
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) cargo build --release --target=aarch64-apple-darwin
      - name: Install rust toolchain for Apple x86
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: x86_64-apple-darwin
      - name: Build release for x86 Apple
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) cargo build --release --target=x86_64-apple-darwin
      - name: Create Universal Binary
        run: |
          lipo -create -output target/release/${{ env.EXECUTABLE_NAME }} target/aarch64-apple-darwin/release/${{ env.EXECUTABLE_NAME }} target/x86_64-apple-darwin/release/${{ env.EXECUTABLE_NAME }}
          strip target/release/${{ env.EXECUTABLE_NAME }}
      - name: Zip release
        uses: vimtor/action-zip@v1.2
        with:
            files: target/release/${{ env.EXECUTABLE_NAME }}
            dest: ${{ env.EXECUTABLE_NAME }}_macos_universal.zip
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.EXECUTABLE_NAME }}_macos_universal.zip
          asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_macos_universal.zip
          release_name: ${{ env.VERSION }}
          overwrite: true

  build-linux:
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build release
        run: |
          cargo build --release
      - name: Prepare release
        run: |
          strip target/release/${{ env.EXECUTABLE_NAME }}
          chmod +x target/release/${{ env.EXECUTABLE_NAME }}
          mv target/release/${{ env.EXECUTABLE_NAME }} .
      - name: Bundle release
        run: |
          tar -czf ${{ env.EXECUTABLE_NAME }}_linux.tar.gz ${{ env.EXECUTABLE_NAME }}
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.EXECUTABLE_NAME }}_linux.tar.gz
          asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_linux.tar.gz
          release_name: ${{ env.VERSION }}
          overwrite: true

  build-windows:
    runs-on: windows-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build release
        run: |
          cargo build --release
      - name: Zip release
        uses: vimtor/action-zip@v1.2
        with:
          files: target/release/${{ env.EXECUTABLE_NAME }}.exe
          dest: ${{ env.EXECUTABLE_NAME }}_windows.zip
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.EXECUTABLE_NAME }}_windows.zip
          asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
          tag: ${{ github.ref }}
          overwrite: true
